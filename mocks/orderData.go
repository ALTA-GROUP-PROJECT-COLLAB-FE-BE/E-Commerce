// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	order "project/e-commerce/features/order"

	mock "github.com/stretchr/testify/mock"
)

// OrderData is an autogenerated mock type for the Data type
type OrderData struct {
	mock.Mock
}

// CancelStatusData provides a mock function with given fields: orderID, idFromToken
func (_m *OrderData) CancelStatusData(orderID int, idFromToken int) (int, error) {
	ret := _m.Called(orderID, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(orderID, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(orderID, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmStatusData provides a mock function with given fields: idOrder, idFromToken
func (_m *OrderData) ConfirmStatusData(idOrder int, idFromToken int) (int, error) {
	ret := _m.Called(idOrder, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idOrder, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idOrder, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyDataOrderDB provides a mock function with given fields: limitint, offsetint, idFromToken
func (_m *OrderData) GetMyDataOrderDB(limitint int, offsetint int, idFromToken int) ([]order.Core, error) {
	ret := _m.Called(limitint, offsetint, idFromToken)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(int, int, int) []order.Core); ok {
		r0 = rf(limitint, offsetint, idFromToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(limitint, offsetint, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HistoryAllData provides a mock function with given fields: limitint, offsetint, idFromToken
func (_m *OrderData) HistoryAllData(limitint int, offsetint int, idFromToken int) ([]order.Core, error) {
	ret := _m.Called(limitint, offsetint, idFromToken)

	var r0 []order.Core
	if rf, ok := ret.Get(0).(func(int, int, int) []order.Core); ok {
		r0 = rf(limitint, offsetint, idFromToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(limitint, offsetint, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAddress provides a mock function with given fields: _a0
func (_m *OrderData) InsertAddress(_a0 order.AddressCore) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(order.AddressCore) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(order.AddressCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: data
func (_m *OrderData) InsertOrder(data order.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(order.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(order.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrderDetail provides a mock function with given fields: data, orderID
func (_m *OrderData) InsertOrderDetail(data order.OrderDetail, orderID int) (int, error) {
	ret := _m.Called(data, orderID)

	var r0 int
	if rf, ok := ret.Get(0).(func(order.OrderDetail, int) int); ok {
		r0 = rf(data, orderID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(order.OrderDetail, int) error); ok {
		r1 = rf(data, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: _a0
func (_m *OrderData) InsertPayment(_a0 order.PaymentCore) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(order.PaymentCore) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(order.PaymentCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderDetailDB provides a mock function with given fields: orderID
func (_m *OrderData) OrderDetailDB(orderID int) ([]order.OrderDetail, error) {
	ret := _m.Called(orderID)

	var r0 []order.OrderDetail
	if rf, ok := ret.Get(0).(func(int) []order.OrderDetail); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCart provides a mock function with given fields: idCart, userID
func (_m *OrderData) SelectCart(idCart []int, userID int) ([]order.OrderDetail, error) {
	ret := _m.Called(idCart, userID)

	var r0 []order.OrderDetail
	if rf, ok := ret.Get(0).(func([]int, int) []order.OrderDetail); ok {
		r0 = rf(idCart, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int, int) error); ok {
		r1 = rf(idCart, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalPrice provides a mock function with given fields: idCart
func (_m *OrderData) TotalPrice(idCart []int) (int, error) {
	ret := _m.Called(idCart)

	var r0 int
	if rf, ok := ret.Get(0).(func([]int) int); ok {
		r0 = rf(idCart)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(idCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderData interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderData creates a new instance of OrderData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderData(t mockConstructorTestingTNewOrderData) *OrderData {
	mock := &OrderData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
